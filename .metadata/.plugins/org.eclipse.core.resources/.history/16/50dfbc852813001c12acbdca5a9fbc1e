package snakeProject;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Point;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.util.ArrayDeque;
import java.util.Random;

import javax.swing.JFrame;
import javax.swing.JPanel;

public class Snake extends JPanel {
	
	private final int WIDTH = 50;
	private ArrayDeque<SnakePart> snake = new ArrayDeque<>();
	private Point apple = new Point(0,0);
	private Random rand = new Random();
	private int Offset = 0;
	private int newDir = 39;
	

	public static void main(String[] args) {
		
		JFrame frame = new JFrame("Snake"); // creation de fenetre
		Snake panel = new Snake();
		frame.addKeyListener(new KeyListener() {
			
			@Override
			public void keyTyped(KeyEvent e) {
				// TODO Auto-generated method stub
				
			}
			
			@Override
			public void keyReleased(KeyEvent e) {
				// TODO Auto-generated method stub
				
			}
			
			@Override
			public void keyPressed(KeyEvent e) {
			panel.onKeyPressed(e.getKeyCode());
				
			}
		});
	
		frame.setContentPane(panel); // permet de mettre les contenus
		frame.setSize(12*50, 12*50); // dimensions fenetre 
		frame.setResizable(false); // fixe les dimensions de la fenetre
		frame.setLocationRelativeTo(null); // pour centre la fenetre 
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); // fermeture fenetre = fermeture prog
		frame.setVisible(true); // pour afficher la fenetre 

	}

	
	public Snake(){
		createApple();
		snake.add(new SnakePart(0, 0, 39));
		//setBackground(Color.WHITE);
		new Thread(new Runnable() {

			@Override
			public void run() {
				
				while(true) {
					repaint();
					try {
						Thread.sleep(1000/60);
					} catch (InterruptedException e) {
						
						e.printStackTrace();
					}
				}//boucle infinie (excution en permanance 60/sec)
				
			}
			
		}).start(); // multi-threading (multi-execution des taches)
}
	
	public void createApple() {
		apple.x = rand.nextInt(12);
		apple.y = rand.nextInt(12);
	}
	@Override
	protected void paintComponent(Graphics g) {
		
		Offset +=5;
		
		if(Offset == WIDTH) { 
			Offset =0;
			try {
				SnakePart head = (SnakePart) snake.getFirst().clone();
				head.move();
				head.dir = newDir;
				snake.addFirst(head);
				snake.pollLast();
			} catch (CloneNotSupportedException e) {
				e.printStackTrace();
			}
		}
		
		super.paintComponent(g);
		
		g.setColor(Color.red);
		g.fillOval(apple.x*WIDTH + (WIDTH/4), apple.y*WIDTH + (WIDTH/4), WIDTH/2, WIDTH/2);
		g.setColor(Color.DARK_GRAY);
		
		for(SnakePart p : snake) {
			
			if(p.dir == 37 || p.dir == 39) { 
				
				g.fillRect(p.x*WIDTH+((p.dir==37)? -Offset:Offset), p.y*WIDTH, WIDTH, WIDTH);
				
				}else{
					g.fillRect(p.x*WIDTH, p.y*WIDTH+((p.dir==38)? -Offset:Offset), WIDTH, WIDTH);
			}
			
		};
	}

	public void onKeyPressed(int keyCode){
		System.out.println("keyCode");
		if(keyCode >= 37 && keyCode <= 40) { 
			if(Math.abs(keyCode - newDir) != 2) {
				newDir = keyCode;
			}
			
		}
	}
	
	class SnakePart{
		public int x, y, dir;
		
		public SnakePart(int x, int y, int dir) {
			this.x = x;
			this.y = y;
			this.dir = dir;
		}
		
		public void move() {
			if(dir == 37 || dir == 39) {
				x+= (dir == 37)? -1 : 1;
			}else {
				y+= (dir == 38)? -1 : 1;
			}
		}
		@Override
		protected Object clone() throws CloneNotSupportedException {
			
			return new SnakePart(x, y, dir);
		}
	}
	
}

